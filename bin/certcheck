#!/usr/bin/env python3
"""
Verify TLS certificate configuration and expiry.

Return codes
  0 - OK
  1 - WARNING
  2 - CRITICAL
  3 - UNKNOWN STATUS / not implemented

These return codes provide compatibility with icinga.
"""

import argparse
import re
import socket
import ssl
import struct
import sys
import time

localhost = socket.gethostname()

WARNING_THRESHOLD = 15
CRITICAL_THRESHOLD = 5


def check(verbose: bool, hostname: str, port: int) -> None:
    ctx = ssl.create_default_context()

    with socket.create_connection((hostname, port)) as sock:
        sock.settimeout(3)
        if port == 25 or port == 587:
            # smtp
            ehlo = bytes(f"EHLO {localhost}\n", "utf-8")
            sock.recv(4096)
            sock.send(ehlo)
            sock.recv(4096)
            sock.send(b"STARTTLS\n")
            resp = sock.recv(4096).decode("ascii")
            # response code 5xx represents an error, e.g. 503 'bad
            # sequence of commands' i.e. command 'starttls' not recognised
            if bool(re.match("^5", resp)):
                print(f"{hostname} port {port} doesn't support TLS.")
                sys.exit(2)
        elif port == 389:
            # ldap
            print("ldap starttls not supported. please use ldaps/636.")
            sys.exit(3)
        elif port == 3306:
            # mysql
            print("mysql starttls not supported.")
            sys.exit(3)
        elif port == 5222 or port == 5269:
            # xmpp
            ehlo = bytes(
                f"<stream:stream to='{hostname}' "
                + "version='1.0' "
                + "xmlns='jabber:client' "
                + "xmlns:stream='http://etherx.jabber.org/streams'>\n",
                "utf-8",
            )
            sock.send(ehlo)
            sock.recv(4096)
            sock.send(b"<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n")
            resp = sock.recv(4096).decode("ascii")
            if resp != "<proceed xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>":
                print(f"{hostname} port {port} doesn't support TLS.")
                sys.exit(2)
        elif port == 5432:
            # postgresql
            # ref: magic number '80877103' per https://www.postgresql.org/docs/current/protocol-message-formats.html
            ehlo = struct.pack("!ii", 8, 80877103)
            sock.send(ehlo)
            resp = sock.recv(1).decode("ascii")
            if resp != "S":
                print(f"{hostname} port {port} doesn't support TLS.")
                sys.exit(2)
        try:
            with ctx.wrap_socket(sock, server_hostname=hostname) as ssl_sock:
                data = ssl_sock.getpeercert(False)
                expiry_str = str(data["notAfter"])  # type: ignore
                certificate_expiry = int(ssl.cert_time_to_seconds(expiry_str))
                current_time = int(time.time())
                expiry_time_in_days = int(
                    (certificate_expiry - current_time) / (60 * 60 * 24)
                )

                # hide extraneous information when running without a tty,
                # e.g. from crontab, icinga, or other monitoring system.
                status_prefix = "Status: " if sys.stdout.isatty() else ""

                if sys.stdout.isatty() and verbose:
                    try:
                        # most CAs have two levels to issuer organizationName
                        issuer = str(data["issuer"][1][0][1])  # type: ignore
                    except Exception:
                        # .. some only have one
                        issuer = str(data["issuer"][0][0][1])  # type: ignore
                    cipher = str(ssl_sock.cipher()[0])  # type: ignore
                    tls_version = str(ssl_sock.version())
                    print(f"Issuer: {issuer}")
                    print(f"Cipher: {cipher} ({tls_version})")
                    print(f"Expiry: {expiry_str}")

                if expiry_time_in_days <= CRITICAL_THRESHOLD:
                    print(
                        f"{status_prefix}"
                        + "CRITICAL - expires in {expiry_time_in_days} day(s)"
                    )
                    sys.exit(2)
                elif expiry_time_in_days <= WARNING_THRESHOLD:
                    print(
                        f"{status_prefix}"
                        + "WARNING - expires in {expiry_time_in_days} day(s)"
                    )
                    sys.exit(1)
                else:
                    print(
                        f"{status_prefix}"
                        + "OK - expires in {expiry_time_in_days} day(s)"
                    )
                    sys.exit(0)
        except ssl.SSLError as e:
            print(e)
            sys.exit(2)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-v",
        "--verbose",
        help="print additional diagnostic information (requires tty)",
        action="store_true",
    )
    parser.add_argument("hostname", type=str, help="host to query")
    parser.add_argument("port", type=int, help="service port", nargs="?", default=443)
    args = parser.parse_args()
    try:
        socket.getaddrinfo(args.hostname, args.port)
    except Exception:
        print(f"'{args.hostname}' not found in DNS.")
        sys.exit(3)
    check(args.verbose, args.hostname, args.port)
