#!/usr/bin/env python3

import re
import socket
import ssl
import struct
import sys
import time

localhost = socket.gethostname()

ALERT_THRESHOLD = 25


def argparse(args: list[str]) -> list[str]:
    usage = f"Usage:\n\t{args[0]} [-v] hostname [port]"
    if len(args) < 2 or len(args) > 4:
        print(usage)
        sys.exit(1)
    elif len(args) == 2:
        verbose = ""
        hostname = args[1]
        port = "443"
    elif len(args) == 3:
        if str(args[1]) == "-v" or str(args[1]) == "--verbose":
            verbose = "true"
            hostname = args[2]
            port = "443"
        else:
            verbose = ""
            hostname = args[1]
            port = args[2]
    elif len(args) == 4:
        if str(args[1]) == "-v" or str(args[1]) == "--verbose":
            verbose = "true"
        else:
            print(usage)
            sys.exit(1)
        hostname = args[2]
        port = args[3]

    port_pattern = re.compile("^[0-9]+$")

    if not port_pattern.match(port):
        print(usage)
        sys.exit(1)

    try:
        socket.getaddrinfo(hostname, port)
    except Exception:
        print(usage)
        sys.exit(1)

    return [verbose, hostname, port]


def check(verbose: bool, hostname: str, port: int) -> None:
    ctx = ssl.create_default_context()

    with socket.create_connection((hostname, port)) as sock:
        sock.settimeout(3)
        if port == 25 or port == 587:
            # smtp
            ehlo = bytes(f"EHLO {localhost}\n", "utf-8")
            sock.recv(4096)
            sock.send(ehlo)
            sock.recv(4096)
            sock.send(b"STARTTLS\n")
            resp = sock.recv(4096).decode("ascii")
            # response code 5xx represents an error, e.g. 503 'bad
            # sequence of commands' i.e. command 'starttls' not recognised
            if bool(re.match("^5", resp)):
                print(f"{hostname} port {port} doesn't support TLS")
                sys.exit(1)
        elif port == 389:
            # ldap
            print("not supported. please use ldaps/636.")
            sys.exit(1)
        elif port == 3306:
            # mysql
            print("mysql starttls not supported")
            sys.exit(1)
        elif port == 5222 or port == 5269:
            # xmpp
            ehlo = bytes(
                f"<stream:stream to='{hostname}' "
                + "version='1.0' "
                + "xmlns='jabber:client' "
                + "xmlns:stream='http://etherx.jabber.org/streams'>\n",
                "utf-8",
            )
            sock.send(ehlo)
            sock.recv(4096)
            sock.send(b"<starttls xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>\n")
            resp = sock.recv(4096).decode("ascii")
            if resp != "<proceed xmlns='urn:ietf:params:xml:ns:xmpp-tls'/>":
                print(f"{hostname} port {port} doesn't support TLS")
                sys.exit(1)
        elif port == 5432:
            # postgresql
            # ref: magic number '80877103' per https://www.postgresql.org/docs/current/protocol-message-formats.html
            ehlo = struct.pack("!ii", 8, 80877103)
            sock.send(ehlo)
            resp = sock.recv(1).decode("ascii")
            if resp != "S":
                print(f"{hostname} port {port} doesn't support TLS")
                sys.exit(1)
        try:
            with ctx.wrap_socket(sock, server_hostname=hostname) as ssl_sock:
                data = ssl_sock.getpeercert(False)
                expiry_str = str(data["notAfter"])  # type: ignore
                certificate_expiry = int(ssl.cert_time_to_seconds(expiry_str))
                current_time = int(time.time())
                expiry_time_in_days = int(
                    (certificate_expiry - current_time) / (60 * 60 * 24)
                )
                if verbose:
                    # issuer organizationName
                    issuer = str(data["issuer"][1][0][1])  # type: ignore
                    cipher = str(ssl_sock.cipher()[0])  # type: ignore
                    tls_version = str(ssl_sock.version())
                    print(f"Issuer: {issuer}")
                    print(f"Cipher: {cipher} ({tls_version})")
                    print(f"Expiry: {expiry_str}")
                if expiry_time_in_days <= ALERT_THRESHOLD:
                    print(f"Status: WARNING - expires in {expiry_time_in_days} day(s)")
                    sys.exit(1)
                else:
                    print(f"Status: OK - expires in {expiry_time_in_days} day(s)")
                    sys.exit(0)
        except ssl.SSLError as e:
            print(e)
            sys.exit(1)


if __name__ == "__main__":
    verbose, hostname, port = argparse(sys.argv)
    check(bool(verbose), hostname, int(port))
